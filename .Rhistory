pi
precision
PI
?sample
K <- 3
mu <- c(-0.5, 1, 2)
precision <- c(1, 1.5, 2)
PI <- c(0.3, 0.4, 0.3)
n_obs <- 1000
seed <- 100
?rnorm
sapply(1:n_obs, function(mu, precision, PI) {
k <- sample.int(K, size = 1, prob = PI);
x <- rnorm(1, mean = mu[k], sd = 1/sqrt(precision[k]));
x
})
K <- 3
mu <- c(-0.5, 1, 2)
precision <- c(1, 1.5, 2)
PI <- c(0.3, 0.4, 0.3)
n_obs <- 1000
seed <- 100
sapply(1:n_obs, function(mu, precision, PI) {
k <- sample.int(K, size = 1, prob = PI);
x <- rnorm(1, mean = mu[k], sd = 1/sqrt(precision[k]));
x
})
k <- sample.int(K, size = 1, prob = PI);
k
x <- rnorm(1, mean = mu[k], sd = 1/sqrt(precision[k]));
sapply(1:n_obs, function(d) {
k <- sample.int(K, size = 1, prob = PI);
x <- rnorm(1, mean = mu[k], sd = 1/sqrt(precision[k]));
x
})
# generate data
set.seed(seed)
ds <- sapply(1:n_obs, function(d) {
k <- sample.int(K, size = 1, prob = PI);
x <- rnorm(1, mean = mu[k], sd = 1/sqrt(precision[k]));
x
})
sd
ds
plot(density(ds))
# model setting
K <- 3
mu <- c(-1, 1, 2)
precision <- c(1, 1, 1)
PI <- c(0.3, 0.4, 0.3)
n_obs <- 1000
seed <- 100
# generate data
set.seed(seed)
ds <- sapply(1:n_obs, function(d) {
k <- sample.int(K, size = 1, prob = PI);
x <- rnorm(1, mean = mu[k], sd = 1/sqrt(precision[k]));
x
})
plot(density(ds))
source('D:/study/github/mcmc vs. vi/simulate data.R', echo=TRUE)
source('D:/study/github/mcmc vs. vi/simulate data.R', echo=TRUE)
ds
source('D:/study/github/mcmc vs. vi/simulate data.R', echo=TRUE)
source('D:/study/github/mcmc vs. vi/simulate data.R', echo=TRUE)
# model setting
K <- 3
mu <- c(-3, 0, 3)
precision <- c(2, 1, 2)
PI <- c(0.3, 0.4, 0.3)
n_obs <- 1000
seed <- 100
# generate data
set.seed(seed)
ds <- sapply(1:n_obs, function(d) {
k <- sample.int(K, size = 1, prob = PI);
x <- rnorm(1, mean = mu[k], sd = 1/sqrt(precision[k]));
x
})
plot(density(ds))
library(rstan)
install.packages(c("rpart.plot", "rstan", "rstudioapi", "sparklyr", "tidyr"))
library(rstan)
?rstan
rstan_options(auto_write = TRUE)
ds
rstan_options(auto_write = TRUE)
# build the model
mixnormal <- stan_model(file = 'mixnormal.stan')
# build the model
mixnormal <- stan_model(file = 'mixnormal.stan')
# build the model
mixnormal <- stan_model(file = 'mixnormal.stan')
# build the model
mixnormal <- stan_model(file = 'mixnormal.stan')
# build the model
mixnormal <- stan_model(file = 'mixnormal.stan')
# build the model
mixnormal <- stan_model(file = 'mixnormal.stan')
# build the model
mixnormal <- stan_model(file = 'mixnormal.stan')
# build the model
mixnormal <- stan_model(file = 'mixnormal.stan')
# build the model
mixnormal <- stan_model(file = 'mixnormal1.stan')
# build the model
mixnormal <- stan_model(file = 'mixnormal1.stan')
# build the model
mixnormal <- stan_model(file = 'mixnormal.stan')
standata <- list(n = length(ds), K = 3, x = ds)
stanFit<- sampling(mixnormal, data = stanData, iter = 1000,
#chains = numCores,
chains = 1,
control = list(adapt_delta = 0.99))
standata <- list(n = length(ds), K = 3, x = ds)
stanFit<- sampling(mixnormal, data = standata, iter = 1000,
#chains = numCores,
chains = 1,
control = list(adapt_delta = 0.99))
stanFit
stanFit<- sampling(mixnormal, data = standata, iter = 2000,
#chains = numCores,
chains = 1,
control = list(adapt_delta = 0.99))
stanFit
hmc <- stanFit
hmcfit <- stanFit
# vi
vifit <- vb(mixnormal)
# vi
vifit <- vb(mixnormal, data = standata, algorithm='meanfield')
vifit
proc.time()
set.seed(100)
ptm_hmc <- proc.time()
hmcfit<- sampling(mixnormal, data = standata, iter = 2000,
#chains = numCores,
chains = 1,
control = list(adapt_delta = 0.99))
(ptm_hmc <- proc.time() - ptm_hmc)
# vi
ptm_vi <- proc.time()
vifit <- vb(mixnormal, data = standata, algorithm='meanfield')
(ptm_vi <- proc.time() - ptm_vi)
